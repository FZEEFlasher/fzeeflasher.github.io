name: Update External Release

on:
  workflow_dispatch:

jobs:
  update_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Get Current Version from Remote index.html
      id: current_version
      run: |
        curl -o index.html https://raw.githubusercontent.com/FZEEFlasher/fzeeflasher.github.io/main/index.html
        VERSION=$(grep -oP 'Latest\s+\d+\.\d+\.\d+' index.html | grep -oP '\d+\.\d+\.\d+' | sort -V | tail -1)
        if [ -z "$VERSION" ]; then
          echo "No version found in index.html"
          echo "current_version=0.0.0" >> $GITHUB_ENV
        else
          echo "Current version: $VERSION"
          echo "current_version=$VERSION" >> $GITHUB_ENV
        fi

    - name: Install Axios
      run: npm install axios

    - name: Check for New Release
      id: check_release
      uses: actions/github-script@v5
      with:
        script: |
          const axios = require('axios');
          const response = await axios.get('https://api.github.com/repos/justcallmekoko/ESP32Marauder/releases/latest');
          const latestRelease = response.data.tag_name;
          return latestRelease;

    - name: Set up Git
      run: |
        git config --global user.name 'InfoSecREDD'
        git config --global user.email 'infosecredd@gmail.com'

    - name: Compare Versions and Download New Release
      run: |
        CURRENT_VERSION=${{ env.current_version }}
        LATEST_VERSION=${{ steps.check_release.outputs.result }}
        version_to_int() {
          # Remove 'v' prefix if present
          local version=${1#v}
          IFS='.' read -ra ADDR <<< "$version"
          printf -v int '%03d%03d%03d' "${ADDR[0]}" "${ADDR[1]}" "${ADDR[2]}"
          echo $int
        }
        
        CURRENT_VERSION_INT=$(version_to_int "$CURRENT_VERSION")
        LATEST_VERSION_INT=$(version_to_int "$LATEST_VERSION")
        
        if [ "$CURRENT_VERSION_INT" -lt "$LATEST_VERSION_INT" ]; then
          echo "New release found: $LATEST_VERSION. Downloading..."
          # Move current files to PREVIOUS
          mkdir -p resources/PREVIOUS
          mv resources/CURRENT/* resources/PREVIOUS/
          # Prepare for new release
          mkdir -p resources/CURRENT
          # Download all .bin files from the latest release
          wget -r -l1 -nd -A .bin -P resources/CURRENT "https://github.com/justcallmekoko/ESP32Marauder/releases/download/$LATEST_VERSION/"
        else
          echo "No new release found. Current version is up to date."
        fi

    - name: Commit and Push Changes
      if: steps.compare_and_download.outputs.status == 'success' && steps.compare_and_download.outputs.result == true
      run: |
        git add .
        git commit -m "Update version to ${{ env.current_version }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
