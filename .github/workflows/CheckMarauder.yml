name: Check/Update Koko Marauder Firmware

on:
  workflow_dispatch:

jobs:
  update_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Get Current Version from Remote index.html
      id: current_version
      run: |
        curl -o index.html https://raw.githubusercontent.com/FZEEFlasher/fzeeflasher.github.io/main/index.html
        VERSION=$(grep -oP 'Latest\s+\d+\.\d+\.\d+' index.html | grep -oP '\d+\.\d+\.\d+' | sort -V | tail -1)
        if [ -z "$VERSION" ]; then
          echo "No version found in index.html"
          echo "current_version=0.0.0" >> $GITHUB_ENV
        else
          echo "Current version: $VERSION"
          echo "current_version=$VERSION" >> $GITHUB_ENV
        fi

    - name: Install Axios
      run: npm install axios

    - name: Check for New Release
      id: check_release
      uses: actions/github-script@v5
      with:
        script: |
          const axios = require('axios');
          const response = await axios.get('https://api.github.com/repos/justcallmekoko/ESP32Marauder/releases/latest');
          const latestRelease = response.data.tag_name;
          return latestRelease;

    - name: Set up Git
      run: |
        git config --global user.name 'InfoSecREDD'
        git config --global user.email 'infosecredd@gmail.com'

    - name: Compare Versions and Download New Release
      run: |
        CURRENT_VERSION=${{ env.current_version }}
        LATEST_VERSION=${{ steps.check_release.outputs.result }}
        version_to_int() {
          # Remove 'v' prefix if present
          local version=${1#v}
          IFS='.' read -ra ADDR <<< "$version"
          printf -v int '%03d%03d%03d' "${ADDR[0]}" "${ADDR[1]}" "${ADDR[2]}"
          echo $int
        }
        
        CURRENT_VERSION_INT=$(version_to_int "$CURRENT_VERSION")
        LATEST_VERSION_INT=$(version_to_int "$LATEST_VERSION")
        
        if [ "$CURRENT_VERSION_INT" -lt "$LATEST_VERSION_INT" ]; then
          echo "New release found: $LATEST_VERSION. Downloading..."
          rm -rf resources/PREVIOUS/*
          # Move current files to PREVIOUS
          mkdir -p resources/PREVIOUS
          mv resources/CURRENT/* resources/PREVIOUS/
          # Prepare for new release
          mkdir -p resources/CURRENT
          # GitHub user and repository
          GITHUB_USER="JustCallMeKoko"
          GITHUB_REPO="ESP32Marauder"
          # Construct the release URL using the version variable
          RELEASE_URL="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/releases/tag/${LATEST_VERSION}"
          DOWNLOAD_DIR="resources/CURRENT"
          # Create the directory if it doesn't exist
          # Fetch the release page and parse it for .bin file URLs
          FILE_URLS=$(curl -Ls $RELEASE_URL | grep -oP 'href="\K[^"]+\.bin(?=")')
          # Download each file
          for FILE_URL in $FILE_URLS; do
              # Construct the full URL
              FULL_URL="https://github.com${FILE_URL}"
              # Use wget to download the file into the specified directory
              wget -P "$DOWNLOAD_DIR" "$FULL_URL"
          done
          update() {
            dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
            cd "$dir"
            if [ $# -ne 4 ]; then
              exit 1
            fi
          
            search_text="$1"
            suffix="$2"
            folder_type="$3"
            js_file="$4"
          
            if [ "$folder_type" == "CURRENT" ]; then
              folder="../resources/CURRENT"
            elif [ "$folder_type" == "PREVIOUS" ]; then
              folder="../resources/PREVIOUS"
            else
              exit 1
            fi
            if [ ! -d "$folder" ]; then
              echo "Error: Folder $folder does not exist."
              exit 1
            fi
            line_number=$(grep -n "$search_text" "$js_file" | cut -d':' -f1)
            if [ -z "$line_number" ]; then
              echo "Search text '$search_text' not found in $js_file."
              exit 1
            fi
            file=$(find "$folder" -type f -name "*$suffix" -print -quit)
            if [ -z "$file" ]; then
              echo "No files found with suffix '$suffix' in $folder."
              exit 0
            fi
            relative_path="${file#../}"
            sed -i "${line_number}!b; :a; N; /'firmware': '.*'/!ba; s|'firmware': '.*'|'firmware': '$relative_path'|" "$js_file"
            echo "The first 'firmware' entry after '$search_text' in $js_file updated to match the file with suffix '$suffix' in folder type '$folder_type'."
          }
          
          update "Mpreviouss2Files" "flipper_sd_serial.bin" "PREVIOUS" "variables.js"
          update "Mlatests2Files" "flipper_sd_serial.bin" "CURRENT" "variables.js"
          update "Mpreviouss2SDFiles" "flipper.bin" "PREVIOUS" "variables.js"
          update "Mlatests2SDFiles" "flipper.bin" "CURRENT" "variables.js"
          
          update "MpreviouswroomFiles" "old_hardware.bin" "PREVIOUS" "variables.js"
          update "MlatestwroomFiles" "old_hardware.bin" "CURRENT" "variables.js"
          update "MV6previousFiles" "v6.bin" "PREVIOUS" "variables.js"
          update "MV6latestFiles" "v6.bin" "CURRENT" "variables.js"
          
          update "MV6_1previousFiles" "v6_1.bin" "PREVIOUS" "variables.js"
          update "MV6_1latestFiles" "v6_1.bin" "CURRENT" "variables.js"
          update "MKitpreviousFiles" "kit.bin" "PREVIOUS" "variables.js"
          update "MKitlatestFiles" "kit.bin" "CURRENT" "variables.js"
          
          update "MS3previousFiles" "multiboardS3.bin" "PREVIOUS" "variables.js"
          update "MS3latestFiles" "multiboardS3.bin" "CURRENT" "variables.js"
          update "MV6MinipreviousFiles" "mini.bin" "PREVIOUS" "variables.js"
          update "MV6MinilatestFiles" "mini.bin" "CURRENT" "variables.js"
          
          update "MD1MinipreviousFiles" "lddb.bin" "PREVIOUS" "variables.js"
          update "MD1MinilatestFiles" "lddb.bin" "CURRENT" "variables.js"
          update "MDevPropreviousFiles" "dev_board_pro.bin" "PREVIOUS" "variables.js"
          update "MDevProlatestFiles" "dev_board_pro.bin" "CURRENT" "variables.js"
        else
          echo "No new release found. Current version is up to date."
        fi

    - name: Commit and Push Changes
      if: steps.compare_and_download.outputs.status == 'success' && steps.compare_and_download.outputs.result == true
      run: |
        git add .
        git commit -m "Update version to ${{ env.current_version }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
